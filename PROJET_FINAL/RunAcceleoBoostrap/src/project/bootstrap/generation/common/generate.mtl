[comment encoding = UTF-8 /]
[**
 * The documentation of the module generate.
 */]
[module generate('http://www.example.org/bootstrapMetaModel')]


[**
 * The documentation of the template generatePage.
 * @param aPage
 */]
[template public generatePage(aPage : Page)]
[comment @main/]
[file ('project/bootstrap/'+aPage.pageName, false, 'UTF-8')]
<!doctype html>
<html lang="fr">
<head>
	<meta charset="utf-8">
	<title>[aPage.pageName/]</title>
	<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1" crossorigin="anonymous">
</head>
<body>


[for (element : Element | aPage.element)]
[generateElement(element)/]
[/for]
</body>
</html>
[/file]
[/template]

[comment We generate all the elements----------------------------------------/]
[template public generateElement(element : Element)]
[let header : Header = element]
	 [generateHeader(header)/]
[/let]
[let paragraph : Paragraph = element]
	 [generateParagraph(paragraph)/]
[/let]
[let section : Section = element]
	 [generateSection(section)/]
[/let]

[let img : Image = element]
	 [generateImg(img)/]
[/let]
[let link : Link = element]
	 [generateLink(link)/]
[/let]
[let button : Button = element]
	 [generateButton(button)/]
[/let]
[/template]

[comment We generate all the text Elements-----------------------------------/]
[template public generateTextElement(element : TextElement)]
[let text : Text = element]
	 [generateText(text)/]
[/let]
[let bold : Bold = element]
	 [generateBold(bold)/]
[/let]
[let italic : Italic = element]
	 [generateItalic(italic)/]
[/let]
[let img : Image = element]
	 [generateImg(img)/]
[/let]
[let link : Link = element]
	 [generateLink(link)/]
[/let]
[let button : Button = element]
	 [generateButton(button)/]
[/let]
[let linkWithRef : LinkWithRef = element]
	 [generateLinkWithRef(linkWithRef)/]
[/let]
[/template]

[comment We generate each of the text Elements-------------------------------/]
[template public generateText(text : Text)]
[text.text/]
[/template]

[template public generateBold(text : Bold)]
<strong>
[for (subtext : TextElement | text.subtext)]
	[generateTextElement(subtext)/]
[/for]
</strong>
[/template]

[template public generateItalic(text : Italic)]
<em>
[for (subtext : TextElement | text.subtext)]
	[generateTextElement(subtext)/]
[/for]
</em>
[/template]

[template public generateImg(myImg : Image)]
<img id="[myImg.id/]" class="[myImg.myclass/]" src="[myImg.url/]" alt="[myImg.title/]">
[/template]

[template public generateLink(myLink : Link)]
<a class="[myLink.myclass/]" id="[myLink.id/]" href="[myLink.url/]">
[for (subtext : TextElement | myLink.subtext)]
	[generateTextElement(subtext)/]
[/for]
</a>
[/template]


[template public generateButton(myButt : Button)]
<button type="button" class="btn [myButt.myclass/]" id="[myButt.id/]" onclick="window.open('https://[myButt.url/]');return false;" >
[myButt.title/]
</button>
[/template]

[template public generateLinkWithRef(myLink : LinkWithRef)]
<a class="" id="" href="#[myLink.reference/]">Link to [myLink.reference/]</a>
[/template]


[comment We generate each of the Elements---------------------------------/]
[template public generateParagraph(myPara : Paragraph)]
<p id="[myPara.id/]" class="[myPara.myclass/]">
	[for (textelement : TextElement | myPara.textelement)]
		[generateTextElement(textelement)/]
	[/for]
</p>
[/template]

[template public generateHeader(myHeader : Header)]
<h[myHeader.grade/] id="[myHeader.id/]" class="[myHeader.myclass/]">
	[for (textelement : TextElement | myHeader.textelement)]
		[generateTextElement(textelement)/]
	[/for]
</h[myHeader.grade/]>
[/template]

[template public generateSection(mySection : Section)]
<section id="[mySection.id/]" class="[mySection.myclass/]">

[if(mySection.grade = 1 )]
<section id="[mySection.id/]" class="alert alert-primary" role="alert">
[elseif(mySection.grade = 2 )]
<section id="[mySection.id/]" class="alert alert-success" role="alert">
[elseif(mySection.grade = 3 )]
<section id="[mySection.id/]" class="alert alert-danger" role="alert">
[else]
<section id="[mySection.id/]" class="alert alert-warning" role="alert">
[/if]
[for (element : Element | mySection.element)]
	[generateElement(element)/]
[/for]
</section>
[/template]



